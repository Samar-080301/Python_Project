from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
import tensorflow.compat.v2.feature_column as fc
import tensorflow as tf
from __future__ import absolute_import, division, print_function, unicode_literals
dftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv') # open and read training data
dfeval = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv') # open and read testing data
y_train = dftrain.pop('survived') # separate the label column from train
y_eval = dfeval.pop('survived') # separate the label column from eval
CATEGORICAL_COLUMNS = ['sex', 'n_siblings_spouses', 'parch', 'class', 'deck',
                       'embark_town', 'alone'] # stating the column names for categorical
NUMERIC_COLUMNS = ['age', 'fare'] # stating the column names for continous
feature_columns = [] #
for feature_name in CATEGORICAL_COLUMNS:
  vocabulary = dftrain[feature_name].unique()  # gets a list of all unique values from given feature column
  feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))
for feature_name in NUMERIC_COLUMNS:
  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))

def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32): # function with data, epoch and baatches
  def input_function():  # inner function, this will be returned
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))  # create tf.data.Dataset object with data and its label
    if shuffle: # if shuffle=True thats already true as given
      ds = ds.shuffle(1000)  # randomize order of data
    ds = ds.batch(batch_size).repeat(num_epochs)  # split dataset into batches of 32 and repeat process for number of epochs
    return ds  # return a batch of the dataset
  return input_function  # return a function object for use
train_input_fn = make_input_fn(dftrain, y_train)  # here we will call the input_function that was returned to us to get a dataset object we can feed to the model
eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False) # eval data is having one epoch and no shuffle, becaue it's unkown data and need to be seen only once and that too for prediction
linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns) # We create a linear estimtor by passing the feature columns we created earlier
linear_est.train(train_input_fn)  # train
result = linear_est.evaluate(eval_input_fn)  # get model metrics/stats by testing on tetsing data
clear_output()  # clears consoke output
print(result['accuracy']) # print accuracy of model
result=list(linear_est.predict(eval_input_fn))
num=int(input("Enter the index of data for prediction: ")) # Enter the index of data for prediction for self verification of model
print(dfeval.iloc[num]) # selecting a particular item for prediction
if result[num]['probabilities'][0]>result[num]['probabilities'][1]: print("Saved") # if-else for printing text of probablistic prediction
else: print("Saved")  
